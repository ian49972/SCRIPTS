writefile("KJ21.mp3", game:HttpGet("https://github.com/ian49972/smth/raw/refs/heads/main/KJ21.mp3"))

local TS = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CollectionService = game:GetService("CollectionService")
local TextService = game:GetService("TextService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local tool = Instance.new("Tool")
tool.Name = "Unlimited Flex Works"
tool.RequiresHandle = false
tool.Parent = LocalPlayer.Backpack

local dialogueModel = game:GetObjects("rbxassetid://74714833540240")[1]
dialogueModel.Parent = game.Workspace

local animModel = game:GetObjects("rbxassetid://108921694205594")[1]
animModel.Parent = game.Workspace
animModel:PivotTo(LocalPlayer.Character:GetPivot())

local keyframeSequence = animModel.AnimSaves:FindFirstChild("Unlimited Flex Works ")
if not keyframeSequence then
    warn("Keyframe not found")
    return
end

local ServerStorage = game:GetService("ServerStorage")
keyframeSequence.Parent = ServerStorage

animModel:Destroy()

local function getColor(timeLength, points)
    local data1 = points[1]
    local allPoints = points[#points]
    local newPoint = 0
    local value = data1.Value
    for i = 1, #points - 1 do
        if points[i].Time <= timeLength and timeLength <= points[i + 1].Time then
            data1 = points[i]
            allPoints = points[i + 1]
            newPoint = (timeLength - data1.Time) / (allPoints.Time - data1.Time)
            return data1.Value:lerp(allPoints.Value, newPoint)
        end
    end
    return value
end

local function EndDialogue(gui)
    for _, v in gui:GetChildren() do
        if v.Name == "letter" then
            v:SetAttribute("Ending", true)
            TS:Create(v, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
                Position = v.Position + UDim2.new(0, 0, 0, 50),
                TextTransparency = 1,
                TextStrokeTransparency = 1
            }):Play()
            game.Debris:AddItem(v, 0.5)
        end
    end
end

local function CreateDialogue(data, model)
    model = model or dialogueModel
    local dialogueId = tostring(os.clock())
    local DialogueUI = LocalPlayer.PlayerGui:FindFirstChild(model.Name .. "CUSTOM_DIALOGUE_" .. dialogueId) or dialogueModel:WaitForChild("CUSTOM_DIALOGUE"):Clone()
    DialogueUI.Name = model.Name .. "CUSTOM_DIALOGUE_" .. dialogueId
    local text = ""
    local posY = 0
    local posX = 0
    local Time = 0
    local totalDuration = 0

    if not DialogueUI:GetAttribute("Created") then
        local Template = DialogueUI:WaitForChild("Holder"):WaitForChild("Template")
        local Holder = DialogueUI.Holder
        Holder.Position = UDim2.new(0.5, 0, 1, 0)
        local NameLabel = Template:WaitForChild("Name")
        NameLabel.Position = UDim2.new(0.5, 0, 0.4, 0)
        NameLabel.TextTransparency = 1
        NameLabel.TextStrokeTransparency = 1
        Template:WaitForChild("ImageLabel").Image = "rbxassetid://109331226741959"
        Template:WaitForChild("ImageLabel").ImageTransparency = 1
        TS:Create(Template:WaitForChild("ImageLabel"), TweenInfo.new(1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
            ImageTransparency = 0
        }):Play()
        TS:Create(NameLabel, TweenInfo.new(1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
            TextTransparency = 0,
            TextStrokeTransparency = 0
        }):Play()
    else
        DialogueUI:SetAttribute("Created", os.clock())
    end
    DialogueUI.Parent = LocalPlayer.PlayerGui
    DialogueUI.Enabled = true
    CollectionService:AddTag(DialogueUI, "CUSTOM_DIALOGUE")
    DialogueUI:WaitForChild("Holder"):WaitForChild("Template"):WaitForChild("Name").Text = LocalPlayer.Name
    for _, v in data do
        text = text .. v.Text
        totalDuration = totalDuration + (#v.Text * (v.TypeSpeed or 0.05))
    end
    local isHigh = false
    for _, v in data do
        if v.HigherUp then
            isHigh = true
            TS:Create(DialogueUI.Holder, TweenInfo.new(0.2), {
                Position = UDim2.new(0.5, 0, 0.965, 0)
            }):Play()
        end
    end
    if not isHigh then
        TS:Create(DialogueUI.Holder, TweenInfo.new(1), {
            Position = UDim2.new(0.5, 0, 1, 0)
        }):Play()
    end
    EndDialogue(DialogueUI.Holder.Template)
    for _, v in data do
        local split = string.split(v.Text, "")
        local font = v.Bold and Enum.Font.SourceSansBold or v.Italic and Enum.Font.SourceSansItalic or Enum.Font.SourceSans
        for _, b in split do
            posY = posY + TextService:GetTextSize(b, 25, font, Vector2.new(100, 100)).X
        end
    end
    posX = 0
    for _, v in data do
        local split = string.split(v.Text, "")
        local font = v.Bold and Enum.Font.SourceSansBold or v.Italic and Enum.Font.SourceSansItalic or Enum.Font.SourceSans
        for _, b in split do
            local TextService_TextLabel = TextService:GetTextSize(b, 25, font, Vector2.new(100, 100))
            local TextLabel = Instance.new("TextLabel")
            local newPosY = posY
            local newPosX = posX
            TextLabel.AnchorPoint = Vector2.new(0, 0.5)
            TextLabel.Position = UDim2.new(0.5, newPosX - newPosY / 2, 0.5, 10)
            TextLabel.Size = UDim2.new(0, TextService_TextLabel.X, 0, TextService_TextLabel.Y)
            TextLabel.Text = b
            TextLabel.Name = "letter"
            TextLabel.Font = font
            TextLabel.TextSize = 25
            TextLabel.Parent = DialogueUI.Holder.Template
            TextLabel.BackgroundTransparency = 1
            TextLabel.TextStrokeColor3 = v.TextStrokeColor or Color3.fromRGB(0, 0, 0)
            TextLabel.TextStrokeTransparency = 1
            TextLabel.TextTransparency = 1
            task.delay(Time, function()
                local osClock = os.clock()
                repeat
                    local keyPointTime = math.min((os.clock() - osClock) / 0.35, 1)
                    local shakeLifeTime = math.min((os.clock() - osClock) / (v.Shake.Lifetime or 1), 1)
                    local currentShake = not v.Shake.Enabled and UDim2.new(0, 0, 0, 0) or UDim2.new(0, math.random(- (v.Shake.Intensity or 1), v.Shake.Intensity or 1) * (1 - shakeLifeTime), 0, math.random(- (v.Shake.Intensity or 1), v.Shake.Intensity or 1) * (1 - shakeLifeTime))
                    local textSettings = 1 - (1 + 2.70158 * math.pow(keyPointTime - 1, 3) + 1.70158 * math.pow(keyPointTime - 1, 2))
                    TextLabel.TextStrokeTransparency = (1 - keyPointTime) ^ 10
                    TextLabel.TextTransparency = textSettings
                    TextLabel.TextSize = 25 + 25 * textSettings
                    TextLabel.TextColor3 = v.UseRainbow and getColor(keyPointTime, v.Color.Keypoints) or v.Color.Keypoints[#v.Color.Keypoints].Value
                    TextLabel.Position = UDim2.new(0.5, newPosX - newPosY / 2, 0.5, 0) + currentShake
                    task.wait()
                until os.clock() - osClock > math.max(0.35, v.Shake.Lifetime or 1) or not TextLabel or not TextLabel:IsDescendantOf(DialogueUI) or TextLabel:GetAttribute("Ending")
                if TextLabel then
                    TextLabel.TextStrokeTransparency = 0
                    TextLabel.TextTransparency = 0
                    TextLabel.TextSize = 25
                    TextLabel.TextColor3 = v.UseRainbow and Color3.fromRGB(255, 255, 255) or v.Color.Keypoints[#v.Color.Keypoints].Value
                    TextLabel.Position = UDim2.new(0.5, newPosX - newPosY / 2, 0.5, 0)
                end
            end)
            Time = Time + (v.TypeSpeed or 0.05)
            posX = posX + TextService_TextLabel.X
        end
    end
    task.spawn(function()
        task.wait(totalDuration + 1)
        if DialogueUI.Parent then
            DialogueUI.Name = "deleting"
            EndDialogue(DialogueUI.Holder.Template)
            TS:Create(DialogueUI.Holder:WaitForChild("Template"):WaitForChild("ImageLabel"), TweenInfo.new(1, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
                ImageTransparency = 1
            }):Play()
            TS:Create(DialogueUI.Holder:WaitForChild("Template"):WaitForChild("Name"), TweenInfo.new(1, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
                TextTransparency = 1,
                TextStrokeTransparency = 1
            }):Play()
            task.delay(1, function()
                if DialogueUI then
                    DialogueUI:Destroy()
                end
            end)
        end
    end)
end

local function Speak(model, data)
    CreateDialogue(data, model)
end

local tStyle, tDirection = {
    [Enum.PoseEasingStyle.Linear]    = Enum.EasingStyle.Linear;
    [Enum.PoseEasingStyle.Bounce]    = Enum.EasingStyle.Bounce;
    [Enum.PoseEasingStyle.Cubic]     = Enum.EasingStyle.Cubic;
    [Enum.PoseEasingStyle.Elastic]   = Enum.EasingStyle.Elastic;
    [Enum.PoseEasingStyle.Constant]  = Enum.EasingStyle.Linear;
}, {
    [Enum.PoseEasingDirection.In]    = Enum.EasingDirection.In;
    [Enum.PoseEasingDirection.Out]   = Enum.EasingDirection.Out;
    [Enum.PoseEasingDirection.InOut] = Enum.EasingDirection.InOut;
}

function PlayKeyframeSequence(Model, KeyFrameSequence, InitialSpeedMult)
    local AllKeyFrames = {}
    
    for i, Keyframe in pairs(KeyFrameSequence:GetKeyframes()) do
        table.insert(AllKeyFrames, {
            Time = Keyframe.Time,
            Keyframe = Keyframe
        })
    end
    table.sort(AllKeyFrames, function(a, b)
        return a.Time < b.Time
    end)
    
    local tweens = {}
    local motors = {}
    local motorValues = {}
    local KeyFramePoses = {}
    
    local function GetMotorFromPose(Pose, Keyframe)
        local FullName = Pose:GetFullName()
        local Path = string.split(FullName, ".")
        local KFPosition = table.find(Path, Keyframe.Keyframe.Name)
        
        for i, v in pairs(Model:GetDescendants()) do
            if v:IsA("Motor6D") and v.Part1 and v.Part1.Name == Pose.Name and v.Part0 and v.Part0.Name == Pose.Parent.Name then
                return v
            end
        end
        return nil
    end
    
    for i, Keyframe in pairs(AllKeyFrames) do
        for x, Pose in pairs(Keyframe.Keyframe:GetDescendants()) do
            if Pose:IsA("Pose") and Pose.Weight > 0 then
                local Motor6D = motors[Pose.Name] or GetMotorFromPose(Pose, Keyframe)
                if not KeyFramePoses[i] then
                    KeyFramePoses[i] = {
                        Time = Keyframe.Time,
                        Poses = {}
                    }
                end
                if not motors[Pose.Name] and Motor6D then
                    motors[Pose.Name] = Motor6D
                end
                if not motorValues[Pose.Name] and Motor6D then
                    local motorVal = Instance.new("CFrameValue")
                    motorVal.Name = "MotorValue"
                    motorVal.Parent = Motor6D
                    motorValues[Pose.Name] = motorVal
                end
                
                if Motor6D then
                    KeyFramePoses[i].Poses[Pose.Name] = {Motor6D = Motor6D, Pose = Pose}
                end
            end
        end
    end
    
    local startTime = tick()
    local transitionDuration = 13
    local targetSpeedMult = 1.2
    local currentSpeedMult = InitialSpeedMult 
    
    local function lerp(a, b, t)
        return a + (b - a) * t
    end
    
    if #KeyFramePoses - 1 > 0 then
        local lastPose = {}
        for i in ipairs(KeyFramePoses) do
            if i == #KeyFramePoses then break end
            
            local KF1, KF2 = KeyFramePoses[i], KeyFramePoses[i + 1]
            local t = KF2.Time - KF1.Time
            
            tweens[i] = {
                Time = t,
                Tweens = {}
            }
            for name, data in pairs(KF1.Poses) do
                lastPose[name] = data
            end
            for name, data in pairs(KF2.Poses) do
                local tweeninfo = TweenInfo.new(
                    math.abs(lastPose[name].Pose:FindFirstAncestorOfClass("Keyframe").Time - KF2.Time),
                    tStyle[lastPose[name].Pose.EasingStyle],
                    tDirection[lastPose[name].Pose.EasingDirection]
                )
                tweens[i].Tweens[name] = TS:Create(motorValues[name], tweeninfo, {Value = data.Pose.CFrame})
            end
        end
    end
    
    local function getLength()
        return KeyFramePoses[#KeyFramePoses].Time
    end
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        for i, v in pairs(motors) do
            if v and motorValues[i] and motorValues[i].Parent then
                v.Transform = motorValues[i].Value
            end
        end
    end)
    
    local function play()
        for i, v in pairs(tweens) do
            local elapsed = tick() - startTime
            currentSpeedMult = lerp(InitialSpeedMult, targetSpeedMult, math.min(elapsed / transitionDuration, 1))
            local scaledTime = v.Time / currentSpeedMult
            
            for x, tween in pairs(v.Tweens) do
                tween:Play()
            end
            task.wait(scaledTime)
        end
    end
    
    play()
    
    for name, motor in pairs(motors) do
        if motor then
            motor.Transform = CFrame.new()
        end
        if motorValues[name] then
            motorValues[name]:Destroy()
        end
    end
    connection:Disconnect()
    
    return getLength()
end

-- Dialogue sequence function
local function RunDialogueSequence()
    local data1 = {
        {
            Text = "because with this... ",
            TypeSpeed = 0.09,
            Bold = true,
            Italic = false,
            TextStrokeColor = Color3.fromRGB(0, 0, 0),
            Color = {
                Keypoints = {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }
            },
            UseRainbow = false,
            Shake = {Enabled = false, Intensity = 1, Lifetime = 1},
            HigherUp = true
        },
        {
            Text = "IT'S OVER!",
            TypeSpeed = 0.05,
            Bold = true,
            Italic = false,
            TextStrokeColor = Color3.fromRGB(0, 0, 0),
            Color = {
                Keypoints = {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                }
            },
            UseRainbow = false,
            Shake = {Enabled = true, Intensity = 2, Lifetime = 0.5},
            HigherUp = true
        }
    }
    Speak(dialogueModel, data1)
    
    task.wait(4)
    local data2 = {
        {
            Text = "KJ's... 21 SERIES",
            TypeSpeed = 0.07,
            Bold = true,
            Italic = false,
            TextStrokeColor = Color3.fromRGB(0, 0, 0),
            Color = {
                Keypoints = {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.2, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.4, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.6, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.8, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))
                }
            },
            UseRainbow = true,
            Shake = {Enabled = false, Intensity = 1, Lifetime = 1},
            HigherUp = false
        }
    }
    Speak(dialogueModel, data2)
    
    task.wait(7.7)
    local data3 = {
        {
            Text = "UNLIMITED FLEX WORKS",
            TypeSpeed = 0.05,
            Bold = true,
            Italic = false,
            TextStrokeColor = Color3.fromRGB(0, 0, 0),
            Color = {
                Keypoints = {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.2, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.4, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.6, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.8, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))
                }
            },
            UseRainbow = true,
            Shake = {Enabled = false, Intensity = 1, Lifetime = 1},
            HigherUp = false
        }
    }
    Speak(dialogueModel, data3)
    
    task.wait(3.3)
    local data4 = {
        {
            Text = "You know...",
            TypeSpeed = 0.05,
            Bold = false,
            Italic = true,
            TextStrokeColor = Color3.fromRGB(0, 0, 0),
            Color = {
                Keypoints = {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }
            },
            UseRainbow = false,
            Shake = {Enabled = false, Intensity = 1, Lifetime = 1},
            HigherUp = false
        }
    }
    Speak(dialogueModel, data4)
    
    task.wait(2)
    local data5 = {
        {
            Text = "Sometimes i imagine what i'd be doing...",
            TypeSpeed = 0.07,
            Bold = false,
            Italic = true,
            TextStrokeColor = Color3.fromRGB(0, 0, 0),
            Color = {
                Keypoints = {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }
            },
            UseRainbow = false,
            Shake = {Enabled = false, Intensity = 1, Lifetime = 1},
            HigherUp = false
        }
    }
    Speak(dialogueModel, data5)
    
    task.wait(4.5)
    local data6 = {
        {
            Text = "If that day never happened...",
            TypeSpeed = 0.04,
            Bold = false,
            Italic = true,
            TextStrokeColor = Color3.fromRGB(0, 0, 0),
            Color = {
                Keypoints = {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }
            },
            UseRainbow = false,
            Shake = {Enabled = false, Intensity = 1, Lifetime = 1},
            HigherUp = false
        }
    }
    Speak(dialogueModel, data6)
end
tool.Activated:Connect(function()
    local character = LocalPlayer.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    rootPart.Anchored = true
    
    local animator = humanoid:FindFirstChildOfClass("Animator")
    if animator then
        animator:Destroy()
    end
    
    task.spawn(function()
        local sound = Instance.new("Sound")
        sound.SoundId = getcustomasset("KJ21.mp3")
        sound.Volume = 1
        sound.Parent = game.Workspace
        sound.Looped = false
        sound:Play()
        -- Keep sound alive for 28 seconds (animation duration)
        task.wait(35)
        sound:Stop()
        sound:Destroy()
    end)
    
    task.spawn(RunDialogueSequence)
    
    task.spawn(function()
        PlayKeyframeSequence(character, keyframeSequence, 2)
    end)
    
    task.wait(29)
    
    local newAnimator = Instance.new("Animator")
    newAnimator.Parent = humanoid
    
    rootPart.Anchored = false
    
    humanoid:ChangeState(Enum.HumanoidStateType.Running)
end)
